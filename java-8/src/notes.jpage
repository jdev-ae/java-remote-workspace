// Syntax

(input arguments) -> body

(String name) -> System.out.println("Hello, " + name);

(name) -> System.out.println("Hello, " + name);

name -> System.out.println("Hello, " + name);

Runnable r = () -> System.out.println("Hello, " + name);

(Trade t, Menu<Item> items) -> {
	int sum = items.sumAll();
	return prepareTrade(sum);
}

// return values
	implicit
	explicit
	
// type inference
// java compiler automatically determines the types in lambda arguments
	
interface Pricer {
	public List<Trade> skew(List<Trade> trades, int price);		
}

Pricer p1 = (List<Trade> trades, int price) -> {
	// logic
}

// both will work - types are optional
Pricer p2 = (trades, price) -> {
	// logic
}

//predicate
public interface Predicate<T> {

	boolean test(T t);
}

// consumer
@FunctionalInterface
public interface Consumer<T> {

    void accept(T t);

    default Consumer<T> andThen(Consumer<? super T> after) {
        // logic
    }
}

//supplier
@FunctionalInterface
public interface Supplier<T> {
    T get();
}

//function 
@FunctionalInterface
public interface Function<T, R> {

    R apply(T t);
    :
    :
}